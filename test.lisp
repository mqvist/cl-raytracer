(require :asdf)
(require :ray-tracer)

(in-package :ray-tracer)

(defun test (image-width image-height &optional (bound-objects t))
  (let ((camera (look-at (vector3 2.0 2.0 20.0)
                         (vector3 0.0 0.0 0.0)
                         (vector3 0.0 1.0 0.0)
                         1.0))
        (lights (list (make-light :location (vector3 -5.0 5.0 5.0)
                                  :color (color 0.0 0.0 1.0))
                      (make-light :location (vector3 5.0 5.0 5.0)
                                  :color (color 1.0 0.0 0.0))
                      (make-light :location (vector3 0.0 5.0 -5.0)
                                  :color (color 0.0 1.0 0.0))))
        (shapes (list (make-sphere :location (vector3 -2.0 0.0 0.0) :radius 1.0)
                      (make-sphere :location (vector3 0.0 1.0 0.0) :radius 1.0)
                      (make-sphere :location (vector3 2.0 0.0 0.0) :radius 1.0)
                      (make-plane :distance-from-origin -1.0))))
    (write-targa "/Users/mika/projects/lisp/ray-tracer/test.tga"
                 (render-scene (make-scene :objects (mapcar #'(lambda (shape) (make-object :shape shape :color white)) shapes)
                                           :lights lights)
                               camera image-width image-height bound-objects))))

(defun test-2 (image-width image-height &optional (bound-objects t))
  (let ((camera (look-at (vector3 8.0 2.0 5.0)
                         (vector3 0.0 0.0 0.0)
                         (vector3 0.0 1.0 0.0)
                         1.0))
        (lights (list (make-light :location (vector3 -5.0 5.0 5.0)
                                  :color (color 0.0 0.0 1.0))
                      (make-light :location (vector3 5.0 5.0 5.0)
                                  :color (color 1.0 0.0 0.0))
                      (make-light :location (vector3 0.0 5.0 -5.0)
                                  :color (color 0.0 1.0 0.0))))
        (shapes (let ((l nil))
                  (dotimes (row 10)
                    (dotimes (col 10)
                      (setq l (cons (make-sphere :location (vector3 (+ -5.0 col) (+ -5.0 row) 0.0)
                                                 :radius 0.5)
                                    l))))
                  l)))
    (write-targa "/Users/mika/projects/lisp/ray-tracer/test.tga"
                 (render-scene (make-scene :objects (mapcar #'(lambda (shape) (make-object :shape shape :color white)) shapes)
                                           :lights lights)
                               camera image-width image-height bound-objects))))
